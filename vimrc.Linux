" somini.vimrc - Linux

" Data Safety and Managing {{{
let s:user_cache = $HOME.'/.cache/vim'
let s:global_tmp = '/tmp'
let s:global_mnt = '/media/'.$USERNAME
let s:global_mnt2= '/run/media/'.$USERNAME
call CheckDir(s:user_cache)

" Vim Info {{{
let g:viminfo_old = $HOME.'/.viminfo'
let g:viminfo_new = s:user_cache.'/viminfo'
let &viminfo = &viminfo.',r'.s:global_tmp
let &viminfo = &viminfo.',r'.s:global_mnt
let &viminfo = &viminfo.',r'.s:global_mnt2
let &viminfo = &viminfo.',n'.g:viminfo_new
"}}}
" Undo {{{
let &undodir = s:user_cache.'/undo'
call CheckDir(&undodir)
" }}}
" Views {{{
let &viewdir = s:user_cache.'/views'
call CheckDir(&viewdir)
"}}}
" Swap Files {{{
let s:swap_dir = s:user_cache.'/swap'
call CheckDir(s:swap_dir)
" Use the user cache with the full path name
" Check the temporaries too, with full path name
" If all those fail, use the current directory
let &directory = s:swap_dir.'//,'.s:global_tmp.'//'.',.'
" }}}
" Backup Files {{{
let s:backup_dir = s:user_cache.'/backup'
call CheckDir(s:backup_dir)
" Same as swap, only on a different folder
let &backupdir = s:backup_dir.'//'.','.s:global_tmp.'//'.',.'
let &backupskip = &backupskip.','.s:global_tmp.'/*,'.s:global_mnt.'/*,'.s:global_mnt2.'/*'
" }}}
let g:NERDTreeBookmarksFile = s:user_cache.'/NERDTree_Bookmarks'
" }}}

" Plugin Configuration {{{
" CtrlP {{{
let s:ctrlp_cache = s:user_cache.'/plugin/ctrlp'
call CheckDir(s:ctrlp_cache)
let g:ctrlp_cache_dir = s:ctrlp_cache
" Abbreviations {{{
let g:ctrlp_abbrev['abbrevs'] += [
			\ {
			\   'pattern': '^@h',
			\   'expanded': '@cd $HOME',
			\   'mode': 'pfrz',
			\ },
			\ {
			\   'pattern': '^@r',
			\   'expanded': '@cd /',
			\   'mode': 'pfrz',
			\ },
			\ ]
"}}}
let g:ctrlp_funky_cache_dir = s:ctrlp_cache.'/funky'
call CheckDir(g:ctrlp_funky_cache_dir)
" Fallback to find, that's everywhere
unlet g:ctrlp_user_command
let g:ctrlp_user_command = {
			\   'types': {
			\     1: ['.git', 'cd %s && git ls-files -oc --exclude-standard'],
			\     2: ['.hg', 'hg --cwd %s locate -I .'],
			\   },
			\ }
if executable('ag')
	let g:ctrlp_user_command['fallback'] = 'cd %s && ag --nocolor -g ""'
elseif executable('ack')
	let g:ctrlp_user_command['fallback'] = 'cd %s && ack --nocolor -g ""'
elseif executable('pt')
	let g:ctrlp_user_command['fallback'] = 'cd %s && pt --nocolor -g ""'
else
	let g:ctrlp_user_command['fallback'] = 'cd %s && find . -type f | cut --complement -c -2'
endif
"}}}
" EasyClip {{{
let s:easyclip_cache = s:user_cache.'/plugin/easyclip'
call CheckDir(s:easyclip_cache)
let g:EasyClipShareYanksDirectory = s:easyclip_cache
"}}}
" Rust {{{
let g:rust_doc#downloaded_rust_doc_dir = '/usr/local/share/doc/rust/html'
"}}}
"}}}

" Workarounds {{{
" Fedora {{{
" Delete all autocommands
augroup fedora
	autocmd!
augroup END
" }}}
" }}}

" Modeline {{{
" vim:ft=vim:ts=2:sw=2:fdm=marker
"}}}
