#!/bin/bash
has_remote() { # name
	git remote | grep -qF "$1"
}
clean_wd() {
	git diff-index --quiet --ignore-submodules "HEAD"
}
equal_sha1() { # value1 value2
	git diff-tree --quiet "$1" "$2"
}
remote_url() { # name url
	name="$1"
	url="$2"
	has_remote "$name" \
		&& git remote set-url "$name" "$url" \
		|| git remote add "$name" "$url"

}

is_online() {
	[ -z "$OFFLINE" ]
}
is_noninteractive() {
	[ -n "$INTERACTIVE" ]
}

trap 'exit 254' SIGINT # Stop everything on CTRL-C

current_root="$(git rev-parse --show-toplevel)"
if [[ $# -le 1 ]]; then
	operation="${1:-"config"}"
	# Entry point, recurse into the submodules
	echo "Recursing into submodules | Operation '$operation'"

	git submodule foreach --quiet "$(readlink -e "$0") $operation"' "$name" "$path" "$sha1" "$toplevel"'

	echo "DONE!"
	read -N 1 -p "Commit changes[Yn]? > " prompt ; echo
	if [ -z "$prompt" -o "$prompt" = 'y' ]; then
		case "$operation" in
			update_3rd)
				git commit -m 'Maintenance: Update 3rd Party Plugins';;
		esac
	fi
	exit 0
else
	# This is called from within a submodule
	operation="$1"
	shift # was the operation
	submodule_name="$1"
	submodule_relpath="$2"
	superproject_SHA1="$3"
	superproject_path="$4"

	gitmodules="$superproject_path/.gitmodules"
	git_config_submodules() {
		git config --file "$gitmodules" "$@"
	}

	# 3rd Party
	# - Remotes:
	#   - "origin": The upstream repository
	# - No local changes, just pull and overwrite changes
	# 1st Party:
	# - Assume two remotes:
	#   - "upstream": The original repository
	#   - "origin": My fork
	# - May contain local commits of changes, don't clobber them
	#   On the other hand, if the upstream is a direct descendant,
	#   Just Update the repository
	url_origin="$(git_config_submodules submodule."$submodule_name".url)"
	url_upstream="$(git_config_submodules submodule."$submodule_name".url-upstream)"

	provenance="${submodule_relpath:0:3}"

	echo "$provenance | SubModule: $submodule_name @ $submodule_relpath"

	branch_master="$(git_config_submodules --get submodule."$submodule_name".branch || echo "master")"
	remote_origin="origin"
	remote_upstream="upstream"
	# Setup the origin remote
	if [ -n "$url_origin" ]; then
		echo "    | Reset remote: origin"
		remote_url "$remote_origin" "$url_origin"
	else
		echo "    | No origin remote ???"
	fi
	# Setup the upstream remote
	if [ -n "$url_upstream" ]; then
		echo "    | Reset remote: upstream"
		remote_url "$remote_upstream" "$url_upstream"
	fi
	# Make sure the active branch is correct
	if clean_wd; then
		if equal_sha1 "$branch_master" "HEAD"; then
			echo "    | Checkout '$branch_master'"
			git checkout --quiet "$branch_master"
		else
			echo "    | Branch '$branch_master' is not HEAD"
		fi
	else
		echo "    | Dirty Working Directory"
	fi

	if [[ $operation =~ ^update.* ]]; then
		echo "    | Update Plugin"
		commit_range=""
		is_online && git fetch --quiet # Get all data
		if [[ $provenance == "3rd" ]]; then
			if ! equal_sha1 "$branch_master" "$remote_origin/$branch_master"; then
				commit_range="$branch_master..$remote_origin/$branch_master"
			fi
		fi
		if [ -n "$commit_range" ]; then
			echo "    | Has changes: '$commit_range'"
			if is_noninteractive; then
				inner_command="u"
			else
				gitk "$commit_range" --
				read -N 1 -p "    |> What to do? (update, skip)> " inner_command ; echo
			fi
			case "$inner_command" in
				u)
					if [[ $provenance == "3rd" ]]; then
						# Simply update to the upstream commit
						clean_wd && git checkout --quiet "$branch_master"
						if git merge --quiet --ff-only "$remote_origin/$branch_master"; then
							echo "    | Update: Fast Forward merge"
							# Add it to the superproject
							git -C "$superproject_path" add "$submodule_relpath"
						fi
					fi
					;;
				s)
					echo "    | Skip this plugin"
					;;
			esac
		fi
	fi

	exit 0 # OK
fi
